// <autogenerated>
//   This file was generated by T4 code generator ServiceClient1.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.ServiceModel;

using Framework.ServiceModel;

namespace SmartHotel.Registration
{
#pragma warning disable 0618
    /// <summary>Provides a wrapper around a <see cref="SmartHotel.Registration.Wcf.IService"/> WCF client.</summary>
    /// <remarks>
    /// An instance of this class can be created without wrapping it in a using statement.  The underlying proxy is 
    /// opened and closed for each call, including under exceptional conditions.  Furthermore the client implements the
    /// WCF contract directly making it easier to use the interface directly in code without regard to whether the proxy
    /// is being used or not.
    /// <para/>
    /// In cases where several methods are to be called together it makes more sense to use a persistent channel.  Refer
    /// to <see cref="ISupportsPersistentChannel"/> for how to do this.
    /// <para/>
    /// Only methods visible through WCF are implemented.  Properties, non-operation contract methods and special members are ignored.
    /// Non-service contract interfaces are also ignored.  In general it is considered bad practice to expose these through WCF.
    /// In the rare case where such an implementation is needed then add a partial class to the project that implements
    /// the missing members.
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCode("ServiceClient1", "")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.Diagnostics.DebuggerStepThrough]
    internal partial class IServiceClient : ServiceChannelClient<SmartHotel.Registration.Wcf.IService>, SmartHotel.Registration.Wcf.IService
    {
        public IServiceClient() : base("BasicHttpBinding_IService")
        {
        }

        public IServiceClient(string endpointName) : base(endpointName)
        {
        }
        #region SmartHotel.Registration.Wcf.IService Members
        public virtual System.Collections.Generic.IEnumerable<SmartHotel.Registration.Wcf.Models.Registration> GetRegistrations()
        {

            return InvokeMethod<System.Collections.Generic.IEnumerable<SmartHotel.Registration.Wcf.Models.Registration>>(x => x.GetRegistrations());
        }
        public virtual System.Collections.Generic.IEnumerable<SmartHotel.Registration.Wcf.Models.Registration> GetTodayRegistrations()
        {

            return InvokeMethod<System.Collections.Generic.IEnumerable<SmartHotel.Registration.Wcf.Models.Registration>>(x => x.GetTodayRegistrations());
        }
        public virtual SmartHotel.Registration.Wcf.Models.RegistrationDaySummary GetTodayRegistrationSummary()
        {

            return InvokeMethod<SmartHotel.Registration.Wcf.Models.RegistrationDaySummary>(x => x.GetTodayRegistrationSummary());
        }
        public virtual SmartHotel.Registration.Wcf.Models.Registration GetCheckin(int registrationId)
        {

            return InvokeMethod<SmartHotel.Registration.Wcf.Models.Registration>(x => x.GetCheckin(registrationId));
        }
        public virtual SmartHotel.Registration.Wcf.Models.Registration GetCheckout(int registrationId)
        {

            return InvokeMethod<SmartHotel.Registration.Wcf.Models.Registration>(x => x.GetCheckout(registrationId));
        }
        public virtual void PostRegister(SmartHotel.Registration.Wcf.Data.Booking booking)
        {

            InvokeMethod(x => x.PostRegister(booking));
        }
        #endregion
    }

    /// <summary>Provides extensions for working with <see cref="IService"/> instances.</summary>    
    internal static class IServiceServiceClientExtensions
    {
        /// <summary>Opens a persistent connection to the service.</summary>
        /// <param name="source">The source.</param>
        /// <remarks>
        /// If supported the client will keep the channel open for the life of the returned object.
        /// Code that needs to make several service calls can optimize performance by calling this method to
        /// open a temporary channel to the service.  All service calls on the client will then use the same channel.
        /// <para/>
        /// This method can be used even if the client does not support persistent channels.  The client calls will
        /// execute normally.  Implementations of <see cref="ServiceChannelClient{0}"/> implement this interface.
        /// <para/>
        /// Be sure to wrap the returned object in a using statement to ensure it is closed when no longer needed.        
        /// </remarks>
        /// <seealso cref="ISupportsPersistentChannel" />
        public static IDisposable OpenPersistentChannel(this SmartHotel.Registration.Wcf.IService source)
        {
            var batch = source as ISupportsPersistentChannel;
            if (batch != null)
            {
                batch.Open();

                return Disposable.Action(() => batch.Close());
            };

            return Disposable.Empty;
        }
    }

#pragma warning restore 0618
}
